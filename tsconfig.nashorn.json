{ // https://www.typescriptlang.org/tsconfig
    // This file is mainly for letting your code editor use typings.
    // It's also used when doing a simple yarn tsc, to check all files.
    // Rollup overrides some of these options when doing the actual build.
    "include": [
        "./src/main/resources/**/*.ts", // This includes *.d.ts files.
    // 	"node_modules/@enonic/react4xp/**/*.ts",
    // 	"node_modules/@enonic/js-utils/**/*.ts"
    ],
    "exclude": [
        // This will exclude src/main/resources/index.d.ts which we might want!
        // "**/*.d.ts",
        "./src/main/resources/assets/**/*.*",
        "./src/main/resources/lib/enonic/polyfill-react4xp/nodePolyfills.ts"
    ],
    "compilerOptions": {
        "allowJs": true,
        "allowSyntheticDefaultImports": true,

        // When set to true, allowUmdGlobalAccess lets you access UMD exports as
        // globals from inside module files. A module file is a file that has
        // imports and/or exports. Without this flag, using an export from a UMD
        // module requires an import declaration.
        // An example use case for this flag would be a web project where you
        // know the particular library (like jQuery or Lodash) will always be
        // available at runtime, but you can’t access it with an import.
        "allowUmdGlobalAccess": true,

        "declaration": false,
        "downlevelIteration": true,
        "esModuleInterop": true,
        "experimentalDecorators": true,
        "importHelpers": true,
        "importsNotUsedAsValues": "remove",
        "inlineSourceMap": false,
        "inlineSources": false,
        "lib": [
            "ES5",
            "ES2015",
            "DOM", // HTMLElement
        ],
        "listEmittedFiles": false,
        "listFiles": false,
        "module": "esnext", // What rollup wants
        // "module": "CommonJS", // When no longer using rollup, just tsup?

        "moduleResolution": "node",
        "noImplicitAny": false,
        "noPropertyAccessFromIndexSignature": true,
        "noUncheckedIndexedAccess": true,
        "noUnusedLocals": false,
        "noUnusedParameters": true,
        "outDir": "build/tsc", // This is just for a simple yarn tsc command, rollup overrides this to build/resources/main

        "paths": {
            // Development: (should be commented on master branch)
            // "@enonic-types/core": ["../xp/modules/lib/core/index.d.ts"],

            // "@enonic-types/lib-content": ["../../enonic/xp/modules/lib/lib-content/src/main/resources/lib/xp/content.ts"],
            // "@enonic-types/lib-io": ["../../enonic/xp/modules/lib/lib-io/src/main/resources/lib/xp/io.ts"],
            // "@enonic-types/lib-node": ["../../enonic/xp/modules/lib/lib-node/src/main/resources/lib/xp/node.ts"],
            // "@enonic-types/lib-portal": ["../../enonic/xp/modules/lib/lib-portal/src/main/resources/lib/xp/portal.ts"],

            "@enonic-types/lib-react4xp": ["./src/main/resources/types/index.d.ts"],
            "@enonic/react-components": ["../npm-react-components/src"],
            "@enonic/react-components/*": ["../npm-react-components/src/*"],

            // // "node_modules/@enonic-types/core/index.d.ts": ["../../enonic/xp/modules/core/index.ts"],
            // "/lib/xp/content": ["../../enonic/xp/modules/lib/lib-content/src/main/resources/lib/xp/content.ts"],
            // "/lib/xp/io": ["../../enonic/xp/modules/lib/lib-io/src/main/resources/lib/xp/io.ts"],
            // "/lib/xp/node": ["../../enonic/xp/modules/lib/lib-node/src/main/resources/lib/xp/node.ts"],
            // "/lib/xp/portal": ["../../enonic/xp/modules/lib/lib-portal/src/main/resources/lib/xp/portal.ts"],

            // Production: (should be commented in on master branch)
            // A series of entries which re-map imports to lookup locations relative to this file.
            // In order to get all of the correct typing in your favourite editor.
            // yarn tsc doesn't change the import/require paths based on this
            "@enonic-types/lib-*": ["./node_modules/@enonic-types/lib-*"],
            "@enonic/react4xp": ["./node_modules/@enonic/react4xp/src"],
            "@enonic/react4xp/*": ["./node_modules/@enonic/react4xp/src/*"],

            // NOTE: For some reason these are not enough for Rollup to resolve them as dependencies:
            "/lib/enonic/react4xp": ["./src/main/resources/lib/enonic/react4xp/index.ts"],
            "/lib/enonic/react4xp/*": ["./src/main/resources/lib/enonic/react4xp/*.ts"],

            "/lib/enonic/static": ["./node_modules/@enonic-types/lib-static"],
            "/lib/xp/*": ["./node_modules/@enonic-types/lib-*"],
            "/types": ["./src/main/resources/types/index.d.ts"],
            "/types/*": ["./src/main/resources/types/*"],
            "/*": ["./src/main/resources/*"],
        },
        "removeComments": true,
        "resolveJsonModule": true,
        // Development: (should be commented on master branch)
        // "rootDir": "../..",
        // Production: (should be commented in on master branch)
        // "rootDir": "./",

        "rootDirs": [
            "./src/main/resources",
            "./node_modules"
        ],

        // Even though the setting disables type checking for d.ts files,
        // TypeScript still type checks the code you specifically
        // refer to in your application's source code.
        "skipLibCheck": true, // Disable type checking for node_modules

        "sourceMap": false,

        // When strictNullChecks is false, null and undefined are effectively
        // ignored by the language. This can lead to unexpected errors at
        // runtime.
        // When strictNullChecks is true, null and undefined have their own
        // distinct types and you’ll get a type error if you try to use them
        // where a concrete value is expected.
        // NOTE: Setting it to true gives errors which are NOT really errors in lib/xp/node.ts
        "strictNullChecks": false,

        // tsup Warning Unrecognized target environment "ES3"
        // tsup CJS Build failed Error: Invalid target "es3" in "--target=es3"
        // "target": "ES3",
        // tsup ERROR Transforming const to the configured target environment ("ES5") is not supported yet
        // "target": "ES5",
        // NOTE: target is set in tsup.config.ts instead

        // "typeRoots": [
        // 	"node_modules/@types",
        // 	"node_modules/@enonic-types"
        // ],
        "types": [
            //"@enonic-types/env-nashorn",
            "@enonic-types/global",
        ],
    },
}
