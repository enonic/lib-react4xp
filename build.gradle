// Build library: gradlew build
// Install library locally for development with: gradlew install

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '3.2.0'
    id "com.github.node-gradle.node" version "3.4.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}

dependencies {
    compileOnly "com.enonic.xp:core-api:${xpVersion}"

    implementation "com.enonic.xp:lib-io:${xpVersion}"
    implementation "com.enonic.xp:lib-portal:${xpVersion}"
    implementation "com.enonic.xp:lib-task:${xpVersion}"

    implementation 'com.enonic.lib:lib-cache:2.1.1'
    implementation 'com.enonic.lib:lib-static:1.0.2'

    implementation 'org.jdom:jdom2:2.0.6.1'
    implementation group: 'org.json', name: 'json', version: '20220924'
    implementation group: 'jaxen', name: 'jaxen', version: '1.2.0'

    implementation 'org.apache.commons:commons-pool2:2.11.1'

    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

node {
    download = true
    version = '16.14.0'
}

processResources {
    exclude '**/.gitkeep'
    exclude '**/*.es6'
    exclude '**/*.ts'
}

tasks.withType( Copy ) {
    includeEmptyDirs = false
}

def BUILD_ENV = "production"
if ( project.hasProperty( "dev" ) || project.hasProperty( "development" ) )
{
    BUILD_ENV = "development"
}

task rollup( type: NpmTask ) {
    mustRunAfter( processResources )
    args = ['run', 'rollup']
}
jar.dependsOn( rollup )

if ( BUILD_ENV == 'development' )
{
    task nsiInstall( type: NpmTask ) {
        println "BUILD_ENV is set to '" + BUILD_ENV + "':\nOVERRIDING VANILLA npmInstall IN FAVOR OF node-safe-install (nsi)."
        // Because nsi retains 'npm link' symlinks!
        args = ['run', 'install:nsi']
    }
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall
    nsiInstall.inputs.files( "package.json", "package-lock.json" )
    nsiInstall.outputs.dir( "node_modules" )
    nsiInstall.outputs.file file( "package-lock.json" )
}
else
{
    npmInstall.inputs.files( "package.json", "package-lock.json" )
    // npmInstall.outputs.dir("node_modules")
    npmInstall.outputs.file file( "package-lock.json" )
    rollup.dependsOn( npmInstall )
}

//def ROOT = project.projectDir.toString()
//jar.outputs.dir('build/libs')
