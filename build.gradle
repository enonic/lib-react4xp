// Build library: gradlew build
// Install library locally for development with: gradlew install

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '2.0.0'
    id "com.moowork.node" version "1.3.1"
}

dependencies {
    compile "com.enonic.xp:lib-io:${xpVersion}"
    compile "com.enonic.xp:lib-context:${xpVersion}"
    compile "com.enonic.xp:lib-repo:${xpVersion}"
    compile "com.enonic.xp:lib-node:${xpVersion}"
    compile "com.enonic.xp:lib-portal:${xpVersion}"
    compile "com.enonic.xp:core-api:${xpVersion}"

    compile 'com.enonic.lib:lib-util:2.0.0'
    compile 'com.enonic.lib:lib-cache:2.1.1'

    compile group: 'org.jdom', name: 'jdom', version: '2.0.2'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile group: 'jaxen', name: 'jaxen', version: '1.1.6'

    testCompile "com.enonic.xp:testing:${xpVersion}"
}

node {
    download = true
    version = '9.7.0'
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

def BUILD_ENV = "production"
if (project.hasProperty("dev") || project.hasProperty("development")) {
    BUILD_ENV = "development"
}

task babelXP(type: NodeTask) {
    group 'lib-react4xp'
    description 'Compile server-side XP components from ES6'

    script = file('node_modules/\\@babel/cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main", "--ignore", "src/main/resources/react4xp"]

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
babelXP.dependsOn += 'processResources'

if (BUILD_ENV == 'development') {
    task nsiInstall(type: NpmTask) {
        println "BUILD_ENV is set to '" + BUILD_ENV + "':\nOVERRIDING VANILLA npmInstall IN FAVOR OF node-safe-install (nsi)." // Because nsi retains 'npm link' symlinks!
        args = ['run', 'install:nsi']
    }
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall
    nsiInstall.inputs.files("package.json", "package-lock.json")
    nsiInstall.outputs.dir("node_modules")
    nsiInstall.outputs.file file("package-lock.json")
} else {
    npmInstall.inputs.files("package.json", "package-lock.json")
    // npmInstall.outputs.dir("node_modules")
    npmInstall.outputs.file file("package-lock.json")

    babelXP.dependsOn += 'npmInstall'
}


def ROOT = project.projectDir.toString() + File.separator

task nashornPolyfills(type: NodeTask) {
    group 'lib-react4xp'
    description 'Build default polyfill code, allowing XP to run the (node-written) React server-side rendering in Nashorn'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-nashornpolyfills/webpack.config.js',
            '--env.NASHORNPOLYFILLS_SOURCE=' + 'node_modules/react4xp-runtime-nashornpolyfills/nashornPolyfills.es6',

            // (env.BUILD_R4X + env.NASHORNPOLYFILLS_FILENAME) must match ('build/resources/main' + defaultPolyfillFileName)
            // in com/enonic/lib/react4xp/ssr/EngineFactory.java!
            '--env.BUILD_R4X="' + ROOT + 'build/resources/main/lib/enonic/react4xp/default"',
            '--env.NASHORNPOLYFILLS_FILENAME=nashornPolyfills'
    ]
}
nashornPolyfills.dependsOn += 'babelXP'

task client(type: NodeTask) {
    group 'lib-react4xp'
    description 'Build default client rendering wrapper in the lib'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-client/webpack.config.js',
            '--env.BUILD_R4X="' + ROOT + 'build/resources/main/services/react4xp-client"',
            '--env.BUILD_ENV=' + BUILD_ENV,
            '--env.CHUNK_CONTENTHASH=[name].js',
            '--env.CLIENT_CHUNKS_FILENAME=__delete_me_im_redundant__',
            '--env.ROOT="' + ROOT + '"',

            // Placeholders used in services/react4xp-client/react4xp-client.es6. Keep up to date!
            '--env.LIBRARY_NAME=__REACT4XP__RUNTIME__CLIENT__LIBRARY_NAME__PLACEHOLDER__',
            '--env.SERVICE_ROOT_URL=__REACT4XP__RUNTIME__CLIENT__SERVICE_ROOT_URL__PLACEHOLDER__'
    ]

    doLast {
        def f = new File(ROOT + 'build/resources/main/services/react4xp-client/__delete_me_im_redundant__')
        f.delete()
    }
}
client.dependsOn += 'babelXP'

jar.dependsOn += 'nashornPolyfills'
jar.dependsOn += 'client'
jar.outputs.dir('build/libs')
