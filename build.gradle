plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.base' version '3.5.2'
    id "com.github.node-gradle.node" version "7.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}

dependencies {
    compileOnly "com.enonic.xp:core-api:${xpVersion}"
    compileOnly "com.enonic.xp:portal-api:${xpVersion}"
    compileOnly "com.enonic.xp:script-api:${xpVersion}"

    implementation "com.enonic.xp:lib-io:${xpVersion}"
    implementation "com.enonic.xp:lib-portal:${xpVersion}"
    implementation "com.enonic.xp:lib-schema:${xpVersion}"
    implementation "com.enonic.xp:lib-task:${xpVersion}"

    implementation 'com.enonic.lib:lib-cache:2.2.1'
    implementation 'com.enonic.lib:lib-static:2.0.0'

    implementation 'org.attoparser:attoparser:2.0.7.RELEASE'
    implementation 'org.apache.commons:commons-pool2:2.12.0'

    testImplementation "com.enonic.xp:testing:${xpVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.11.3"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.11.3"
    testImplementation 'org.mockito:mockito-core:5.12.0'
}

node {
    download = true
    version = '22.11.0'
}

processResources {
    exclude '**/.gitkeep'
    exclude '**/*.es6'
    exclude '**/*.ts'
}

tasks.withType( Copy ) {
    includeEmptyDirs = false
}

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check:types'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}
// check.dependsOn npmCheck

def BUILD_ENV = "production"
if ( project.hasProperty( "dev" ) || project.hasProperty( "development" ) )
{
    BUILD_ENV = "development"
}

tasks.register('npmBuild', NpmTask) {
  args = [
    'run',
    'build',
  ]
  environment = [
    'FORCE_COLOR': 'true',
    'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
    'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
  ]
  inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
  outputs.upToDateWhen { false }
}
compileTestJava.dependsOn npmBuild
jar.dependsOn npmBuild
javadoc.dependsOn npmBuild


if ( BUILD_ENV == 'development' )
{
    task nsiInstall( type: NpmTask ) {
        println "BUILD_ENV is set to '" + BUILD_ENV + "':\nOVERRIDING VANILLA npmInstall IN FAVOR OF node-safe-install (nsi)."
        // Because nsi retains 'npm link' symlinks!
        args = ['run', 'install:nsi']
    }
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall
    nsiInstall.inputs.files( "package.json", "package-lock.json" )
    nsiInstall.outputs.dir( "node_modules" )
    nsiInstall.outputs.file file( "package-lock.json" )
}
else
{
    npmInstall.inputs.files( "package.json", "package-lock.json" )
    // npmInstall.outputs.dir("node_modules")
    npmInstall.outputs.file file( "package-lock.json" )
    // rollup.dependsOn( npmInstall )
    npmBuild.dependsOn( npmInstall )
}

test {
    useJUnitPlatform {
    }
}
